{"version":3,"sources":["components/Address.jsx","components/Balance.jsx","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","helpers/Transactor.js","hooks/Debounce.js","helpers/loadAppContracts.js","hooks/useContractConfig.js","App.jsx","index.jsx","constants.js"],"names":["Text","Typography","Address","props","address","value","ens","useLookupAddress","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","indexOf","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","a","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","e","console","log","onScan","possibleNewValue","lastIndexOf","id","name","autoComplete","autoFocus","placeholder","prefix","ethers","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","useEffect","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","signer","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","open","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","key","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","window","setItem","Date","now","privateKey","createRandom","_signingKey","location","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","tx","Transactor","parseEther","to","SendOutlined","Account","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","toNumber","formatUnits","length","JSON","stringify","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","gasPrice","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","map","buttons","placement","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","hexlify","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","args","baseType","parse","stateMutability","returned","result","error","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","chainId","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","values","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","injectedProvider","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","listAccounts","_faucetAddress","getFaucetAddress","icon","GasGauge","parseInt","Header","subTitle","Ramp","modalUp","setModalUp","allFaucets","n","networks","faucet","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","on","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","callbacks","providerOrSigner","etherscan","callback","Signer","isSigner","getNetwork","network","_isProvider","getSigner","options","notify","navigator","onLine","dappId","BLOCKNATIVE_DAPPID","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","parseUnits","gasLimit","sendTransaction","emitter","onclick","notification","info","message","description","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","body","obj","errorObj","useDebounce","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","contractListPromise","externalContractsPromise","loadAppContracts","config","default","deployedContracts","externalContracts","useContractConfig","contractsConfig","setContractsConfig","loadFunc","projectIdAndSecret","BufferList","ipfs","ipfsAPI","host","port","protocol","headers","authorization","Buffer","toString","targetNetwork","NETWORKS","sepolia","STARTING_JSON","external_url","image","attributes","trait_type","getFromIPFS","hashToGet","get","file","path","content","chunk","append","scaffoldEthProvider","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","INFURA_ID","localProviderUrl","rpcUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","logo","Portis","fortmatic","Fortmatic","connector","_options","enable","authereum","Authereum","App","_network","setInjectedProvider","clearCachedProvider","disconnect","useExchangeEthPrice","useGasPrice","useUserProviderAndSigner","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","readContracts","writeContracts","mainnetContracts","useOnBlock","_lastBlockNumber","myMainnetDAIBalance","useContractReader","transferEvents","useEventListener","yourBalance","yourCollectibles","setYourCollectibles","collectibleUpdate","tokenIndex","YourCollectible","tokenOfOwnerByIndex","tokenId","tokenURI","ipfsHash","replace","jsonManifestBuffer","jsonManifest","uri","owner","updateYourCollectibles","networkDisplay","networkSelected","NETWORK","networkLocal","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","Web3Provider","code","reason","route","setRoute","pathname","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","yourJSON","setYourJSON","sending","setSending","setIpfsHash","ipfsDownHash","setIpfsDownHash","setDownloading","ipfsContent","setIpfsContent","transferToAddresses","setTransferToAddresses","minting","setCount","json","mintItem","add","uploaded","update","gasUsed","gas","selectedKeys","Item","exact","paddingBottom","dataSource","renderItem","item","src","maxWidth","transferFrom","blockNumber","paddingTop","enableClipboard","onEdit","edit","updated_src","onAdd","onDelete","del","placeHolder","align","gutter","prevTheme","subgraphUri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","themeMap","defaultTheme","document","getElementById","localhost","hostname","mainnet","kovan","rinkeby","ropsten","goerli","xdai","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony"],"mappings":"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","file":"static/js/main.cdd03112.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n*/\r\n\r\nconst { Text } = Typography;\r\n\r\nconst blockExplorerLink = (address, blockExplorer) =>\r\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\r\n\r\nexport default function Address(props) {\r\n  const address = props.value || props.address;\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let displayAddress = address.substr(0, 6);\r\n\r\n  if (ens && ens.indexOf(\"0x\") < 0) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let text;\r\n  if (props.onChange) {\r\n    text = (\r\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  } else {\r\n    text = (\r\n      <Text copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {text}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useBalance } from \"eth-hooks\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  // const [listening, setListening] = useState(false);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n\r\n  let floatBalance = parseFloat(\"0.00\");\r\n\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") {\r\n    usingBalance = props.balance;\r\n  }\r\n  if (typeof props.value !== \"undefined\") {\r\n    usingBalance = props.value;\r\n  }\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier;\r\n\r\n  if (price && dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Badge, Input } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport Blockie from \"./Blockie\";\r\nimport { ethers } from \"ethers\";\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/*\r\n  ~ What it does? ~\r\n  Displays an address input with QR scan option\r\n  ~ How can I use? ~\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n  ~ Features ~\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n*/\r\n\r\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\r\n\r\nexport default function AddressInput(props) {\r\n  const { ensProvider, onChange } = props;\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (isENS(address)) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scan ? (\r\n        <div\r\n          style={{\r\n            zIndex: 256,\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            width: \"100%\",\r\n          }}\r\n          onClick={() => {\r\n            setScan(false);\r\n          }}\r\n        >\r\n          <QrReader\r\n            delay={250}\r\n            resolution={1200}\r\n            onError={e => {\r\n              console.log(\"SCAN ERROR\", e);\r\n              setScan(false);\r\n            }}\r\n            onScan={newValue => {\r\n              if (newValue) {\r\n                console.log(\"SCAN VALUE\", newValue);\r\n                let possibleNewValue = newValue;\r\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\r\n                }\r\n                setScan(false);\r\n                updateAddress(possibleNewValue);\r\n              }\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\r\n        addonAfter={\r\n          <div\r\n            style={{ marginTop: 4, cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setScan(!scan);\r\n            }}\r\n          >\r\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n              <QrcodeOutlined style={{ fontSize: 18 }} />\r\n            </Badge>{\" \"}\r\n            Scan\r\n          </div>\r\n        }\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    if (!props.price) return \"\";\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"USD\") {\r\n            setMode(\"ETH\");\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode(\"USD\");\r\n            if (currentValue) {\r\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === \"USD\") {\r\n    prefix = \"$\";\r\n    addonAfter = option(\"USD 🔀\");\r\n  } else {\r\n    prefix = \"Ξ\";\r\n    addonAfter = option(\"ETH 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.signer ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.signer || props.provider);\r\n\r\n              let value;\r\n              try {\r\n                value = ethers.utils.parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n*/\r\n\r\nexport default function Account({\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n}) {\r\n  const modalButtons = [];\r\n  if (web3Modal) {\r\n    if (web3Modal.cachedProvider) {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"logoutbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          onClick={logoutOfWeb3Modal}\r\n        >\r\n          logout\r\n        </Button>,\r\n      );\r\n    } else {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"loginbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\r\n          onClick={loadWeb3Modal}\r\n        >\r\n          connect\r\n        </Button>,\r\n      );\r\n    }\r\n  }\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  const display = minimized ? (\r\n    \"\"\r\n  ) : (\r\n    <span>\r\n      {address ? (\r\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\r\n      ) : (\r\n        \"Connecting...\"\r\n      )}\r\n      <Balance address={address} provider={localProvider} price={price} />\r\n      <Wallet\r\n        address={address}\r\n        provider={localProvider}\r\n        signer={userSigner}\r\n        ensProvider={mainnetProvider}\r\n        price={price}\r\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n      />\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {display}\r\n      {modalButtons}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n*/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Address } from \"..\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = thing => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return <Address address={thing} fontSize={22} />;\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nexport default tryToDisplay;\r\n","import { Col, Divider, Row } from \"antd\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <a href=\"#\" onClick={refresh}>\r\n              🔄\r\n            </a>\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../../helpers\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\r\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\r\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\r\n};\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              const args = functionInfo.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                try {\r\n                  const returned = await contractFunction(...args);\r\n                  result = tryToDisplay(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"antd\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\r\nimport Account from \"../Account\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  show,\r\n  price,\r\n  blockExplorer,\r\n  chainId,\r\n  contractConfig,\r\n}) {\r\n  const contracts = useContractLoader(provider, contractConfig, chainId);\r\n  let contract;\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(() => {\r\n    const results = contract\r\n      ? Object.values(contract.interface.functions).filter(\r\n          fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\r\n        )\r\n      : [];\r\n    return results;\r\n  }, [contract, show]);\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false);\r\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\r\n    const contractFunc =\r\n      contractFuncInfo.stateMutability === \"view\" || contractFuncInfo.stateMutability === \"pure\"\r\n        ? contract[contractFuncInfo.name]\r\n        : contract.connect(signer)[contractFuncInfo.name];\r\n\r\n    if (typeof contractFunc === \"function\") {\r\n      if (isQueryable(contractFuncInfo)) {\r\n        // If there are no inputs, just display return value\r\n        return (\r\n          <DisplayVariable\r\n            key={contractFuncInfo.name}\r\n            contractFunction={contractFunc}\r\n            functionInfo={contractFuncInfo}\r\n            refreshRequired={refreshRequired}\r\n            triggerRefresh={triggerRefresh}\r\n          />\r\n        );\r\n      }\r\n\r\n      // If there are inputs, display a form to allow users to provide these\r\n      return (\r\n        <FunctionForm\r\n          key={\"FF\" + contractFuncInfo.name}\r\n          contractFunction={contractFunc}\r\n          functionInfo={contractFuncInfo}\r\n          provider={provider}\r\n          gasPrice={gasPrice}\r\n          triggerRefresh={triggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Account\r\n                address={address}\r\n                localProvider={provider}\r\n                injectedProvider={provider}\r\n                mainnetProvider={provider}\r\n                price={price}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n              {account}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Input, Tooltip } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n**/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  const { price, placeholder, localProvider, ensProvider } = props;\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (localProvider) {\r\n        const _faucetAddress = await localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const updateAddress = newValue => {\r\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\r\n      setAddress(newValue);\r\n    }\r\n  };\r\n\r\n  const tx = Transactor(localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={placeholder ? placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        value={address}\r\n        onChange={e => updateAddress(e.target.value)}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.01\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={localProvider}\r\n              ensProvider={ensProvider}\r\n              price={price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// added display of 0 instead of NaN if gas price is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays gas gauge\r\n\r\n  ~ How can I use? ~\r\n\r\n  <GasGauge\r\n    gasPrice={gasPrice}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide gasPrice={gasPrice} and get current gas gauge\r\n*/\r\n\r\nexport default function GasGauge(props) {\r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        window.open(\"https://ethgasstation.info/\");\r\n      }}\r\n      size=\"large\"\r\n      shape=\"round\"\r\n    >\r\n      <span style={{ marginRight: 8 }}>\r\n        <span role=\"img\" aria-label=\"fuelpump\">\r\n          ⛽️\r\n        </span>\r\n      </span>\r\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\r\n    </Button>\r\n  );\r\n}\r\n","import { PageHeader } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// displays a page header\r\n\r\nexport default function Header() {\r\n  return (\r\n    <a href=\"https://github.com/austintgriffith/scaffold-eth\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <PageHeader title=\"🏗 scaffold-eth\" subTitle=\"🖼 NFT example\" style={{ cursor: \"pointer\" }} />\r\n    </a>\r\n  );\r\n}\r\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\r\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\r\nimport { Button, Divider, Modal } from \"antd\";\r\nimport React, { useState } from \"react\";\r\n\r\n// added display of 0 if price={price} is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\r\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Ramp\r\n    price={price}\r\n    address={address}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Ramp opens directly in the application, component uses RampInstantSDK\r\n  - Provide price={price} and current ETH price will be displayed\r\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\r\n*/\r\n\r\nexport default function Ramp(props) {\r\n  const [modalUp, setModalUp] = useState(\"down\");\r\n\r\n  const type = \"default\";\r\n\r\n  const allFaucets = [];\r\n  for (const n in props.networks) {\r\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\r\n      allFaucets.push(\r\n        <p key={props.networks[n].chainId}>\r\n          <Button\r\n            style={{ color: props.networks[n].color }}\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(props.networks[n].faucet);\r\n            }}\r\n          >\r\n            {props.networks[n].name}\r\n          </Button>\r\n        </p>,\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"large\"\r\n        shape=\"round\"\r\n        onClick={() => {\r\n          setModalUp(\"up\");\r\n        }}\r\n      >\r\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\r\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\r\n      </Button>\r\n      <Modal\r\n        title=\"Buy ETH\"\r\n        visible={modalUp === \"up\"}\r\n        onCancel={() => {\r\n          setModalUp(\"down\");\r\n        }}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            onClick={() => {\r\n              setModalUp(\"down\");\r\n            }}\r\n          >\r\n            cancel\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-us\">\r\n                🇺🇸\r\n              </span>\r\n            </span>\r\n            Wyre\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              new RampInstantSDK({\r\n                hostAppName: \"scaffold-eth\",\r\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\r\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\r\n                swapAsset: \"ETH\",\r\n                userAddress: props.address,\r\n              })\r\n                .on(\"*\", event => console.log(event))\r\n                .show();\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-gb\">\r\n                🇬🇧\r\n              </span>\r\n            </span>\r\n            Ramp\r\n          </Button>\r\n        </p>\r\n\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\r\n              🏦\r\n            </span>\r\n            Coinbase\r\n          </Button>\r\n        </p>\r\n\r\n        <Divider />\r\n\r\n        <h2>Testnet ETH</h2>\r\n\r\n        {allFaucets}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  return undefined;\r\n  console.log(\"no call of that name!\");\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n\r\n  const [tokens, setTokens] = useState();\r\n\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenListResponse = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenListResponse.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  // Avoid theme change flicker\r\n  // if (status === \"loading\") {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\nimport { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n\r\n      let options = null;\r\n      let notify = null;\r\n      if (navigator.onLine) {\r\n        options = {\r\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n          system: \"ethereum\",\r\n          networkId: network.chainId,\r\n          // darkMode: Boolean, // (default: false)\r\n          transactionHandler: txInformation => {\r\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n            const possibleFunction = callbacks[txInformation.transaction.hash];\r\n            if (typeof possibleFunction === \"function\") {\r\n              possibleFunction(txInformation.transaction);\r\n            }\r\n          },\r\n        };\r\n\r\n        notify = Notify(options);\r\n      }\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        if (DEBUG) console.log(e);\r\n        // Accounts for Metamask and default signer on all networks\r\n        let message =\r\n          e.data && e.data.message\r\n            ? e.data.message\r\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\r\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\r\n            : e.data\r\n            ? e.data\r\n            : JSON.stringify(e);\r\n        if (!e.error && e.message) {\r\n          message = e.message;\r\n        }\r\n\r\n        console.log(\"Attempt to clean up:\", message);\r\n        try {\r\n          let obj = JSON.parse(message);\r\n          if (obj && obj.body) {\r\n            let errorObj = JSON.parse(obj.body);\r\n            if (errorObj && errorObj.error && errorObj.error.message) {\r\n              message = errorObj.error.message;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          //ignore\r\n        }\r\n\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default function useDebounce(value, delay) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value]);\r\n\r\n  return debouncedValue;\r\n}\r\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { loadAppContracts } from \"../helpers/loadAppContracts\";\r\n\r\nexport const useContractConfig = () => {\r\n  const [contractsConfig, setContractsConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n    const loadFunc = async () => {\r\n      const result = await loadAppContracts();\r\n      setContractsConfig(result);\r\n    };\r\n    void loadFunc();\r\n  }, []);\r\n  return contractsConfig;\r\n};\r\n","import Portis from \"@portis/web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { Alert, Button, Card, Col, Input, List, Menu, Row } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport Authereum from \"authereum\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  useGasPrice,\r\n  useOnBlock,\r\n  useUserProviderAndSigner,\r\n} from \"eth-hooks\";\r\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\r\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\r\nimport Fortmatic from \"fortmatic\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactJson from \"react-json-view\";\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\r\n//import Torus from \"@toruslabs/torus-embed\"\r\nimport WalletLink from \"walletlink\";\r\nimport Web3Modal from \"web3modal\";\r\nimport \"./App.css\";\r\nimport { Account, Address, AddressInput, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\r\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\r\nimport { Transactor } from \"./helpers\";\r\nimport { useContractConfig } from \"./hooks\";\r\n\r\nconst projectId = \"2GajDLTC6y04qsYsoDRq9nGmWwK\";\r\nconst projectSecret = \"48c62c6b3f82d2ecfa2cbe4c90f97037\";\r\nconst projectIdAndSecret = `${projectId}:${projectSecret}`;\r\n\r\nconst { BufferList } = require(\"bl\");\r\nconst ipfsAPI = require(\"ipfs-http-client\");\r\n\r\nconst ipfs = ipfsAPI({\r\n  host: \"ipfs.infura.io\",\r\n  port: \"5001\",\r\n  protocol: \"https\",\r\n  headers: { authorization: `Basic ${Buffer.from(projectIdAndSecret).toString(\"base64\")}` },\r\n});\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n/*\r\n    Welcome to 🏗 scaffold-eth !\r\n\r\n    Code:\r\n    https://github.com/scaffold-eth/scaffold-eth\r\n\r\n    Support:\r\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\r\n    or DM @austingriffith on twitter or telegram\r\n\r\n    You should get your own Infura.io ID and put it in `constants.js`\r\n    (this is your connection to the main Ethereum network for ENS etc.)\r\n\r\n\r\n    🌏 EXTERNAL CONTRACTS:\r\n    You can also bring in contract artifacts in `constants.js`\r\n    (and then use the `useExternalContractLoader()` hook!)\r\n*/\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst targetNetwork = NETWORKS.sepolia; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = true;\r\nconst NETWORKCHECK = true;\r\n\r\n// EXAMPLE STARTING JSON:\r\nconst STARTING_JSON = {\r\n  description: \"It's actually a bison?\",\r\n  external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\r\n  image: \"https://austingriffith.com/images/paintings/buffalo.jpg\",\r\n  name: \"Buffalo\",\r\n  attributes: [\r\n    {\r\n      trait_type: \"BackgroundColor\",\r\n      value: \"green\",\r\n    },\r\n    {\r\n      trait_type: \"Eyes\",\r\n      value: \"googly\",\r\n    },\r\n  ],\r\n};\r\n\r\n// helper function to \"Get\" from IPFS\r\n// you usually go content.toString() after this...\r\nconst getFromIPFS = async hashToGet => {\r\n  for await (const file of ipfs.get(hashToGet)) {\r\n    console.log(file.path);\r\n    if (!file.content) continue;\r\n    const content = new BufferList();\r\n    for await (const chunk of file.content) {\r\n      content.append(chunk);\r\n    }\r\n    console.log(content);\r\n    return content;\r\n  }\r\n};\r\n\r\n// 🛰 providers\r\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\r\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\r\n\r\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\r\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\r\nconst scaffoldEthProvider = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\r\n  : null;\r\nconst poktMainnetProvider = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\r\n      \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\r\n    )\r\n  : null;\r\nconst mainnetInfura = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\r\n  : null;\r\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_ID\r\n\r\n// 🏠 Your local provider is usually pointed at your local blockchain\r\nconst localProviderUrl = targetNetwork.rpcUrl;\r\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\r\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\r\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\r\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\r\n\r\n// 🔭 block explorer URL\r\nconst blockExplorer = targetNetwork.blockExplorer;\r\n\r\n// Coinbase walletLink init\r\nconst walletLink = new WalletLink({\r\n  appName: \"coinbase\",\r\n});\r\n\r\n// WalletLink provider\r\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://mainnet.infura.io/v3/${INFURA_ID}`, 1);\r\n\r\n/* Web3 modal helps us \"connect\" external wallets: */\r\nconst web3Modal = new Web3Modal({\r\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\r\n  cacheProvider: true, // optional\r\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\r\n  providerOptions: {\r\n    walletconnect: {\r\n      package: WalletConnectProvider, // required\r\n      options: {\r\n        bridge: \"https://polygon.bridge.walletconnect.org\",\r\n        infuraId: INFURA_ID,\r\n        rpc: {\r\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\r\n          42: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n          100: \"https://dai.poa.network\", // xDai\r\n        },\r\n      },\r\n    },\r\n    portis: {\r\n      display: {\r\n        logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\r\n        name: \"Portis\",\r\n        description: \"Connect to Portis App\",\r\n      },\r\n      package: Portis,\r\n      options: {\r\n        id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\r\n      },\r\n    },\r\n    fortmatic: {\r\n      package: Fortmatic, // required\r\n      options: {\r\n        key: \"pk_live_5A7C91B2FC585A17\", // required\r\n      },\r\n    },\r\n    \"custom-walletlink\": {\r\n      display: {\r\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\r\n        name: \"Coinbase\",\r\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\r\n      },\r\n      package: walletLinkProvider,\r\n      connector: async (provider, _options) => {\r\n        await provider.enable();\r\n        return provider;\r\n      },\r\n    },\r\n    authereum: {\r\n      package: Authereum, // required\r\n    },\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const mainnetProvider =\r\n    poktMainnetProvider && poktMainnetProvider._isProvider\r\n      ? poktMainnetProvider\r\n      : scaffoldEthProvider && scaffoldEthProvider._network\r\n      ? scaffoldEthProvider\r\n      : mainnetInfura;\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [address, setAddress] = useState();\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\r\n      await injectedProvider.provider.disconnect();\r\n    }\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  };\r\n\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider);\r\n  const userSigner = userProviderAndSigner.signer;\r\n\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (userSigner) {\r\n        const newAddress = await userSigner.getAddress();\r\n        setAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [userSigner]);\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userSigner, gasPrice);\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\r\n\r\n  const contractConfig = useContractConfig();\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider, contractConfig);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\r\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\r\n\r\n  // If you want to call a function on a new block\r\n  useOnBlock(mainnetProvider, () => {\r\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\r\n  });\r\n\r\n  // Then read your DAI balance like:\r\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\r\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\r\n  ]);\r\n\r\n  // keep track of a variable from the contract in the local React state:\r\n  const balance = useContractReader(readContracts, \"YourCollectible\", \"balanceOf\", [address]);\r\n  console.log(\"🤗 balance:\", balance);\r\n\r\n  // 📟 Listen for broadcast events\r\n  const transferEvents = useEventListener(readContracts, \"YourCollectible\", \"Transfer\", localProvider, 1);\r\n  console.log(\"📟 Transfer events:\", transferEvents);\r\n\r\n  //\r\n  // 🧠 This effect will update yourCollectibles by polling when your balance changes\r\n  //\r\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\r\n  const [yourCollectibles, setYourCollectibles] = useState();\r\n\r\n  useEffect(() => {\r\n    const updateYourCollectibles = async () => {\r\n      const collectibleUpdate = [];\r\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\r\n        try {\r\n          console.log(\"GEtting token index\", tokenIndex);\r\n          const tokenId = await readContracts.YourCollectible.tokenOfOwnerByIndex(address, tokenIndex);\r\n          console.log(\"tokenId\", tokenId);\r\n          const tokenURI = await readContracts.YourCollectible.tokenURI(tokenId);\r\n          console.log(\"tokenURI\", tokenURI);\r\n\r\n          const ipfsHash = tokenURI.replace(\"https://ipfs.io/ipfs/\", \"\");\r\n          console.log(\"ipfsHash\", ipfsHash);\r\n\r\n          const jsonManifestBuffer = await getFromIPFS(ipfsHash);\r\n\r\n          try {\r\n            const jsonManifest = JSON.parse(jsonManifestBuffer.toString());\r\n            console.log(\"jsonManifest\", jsonManifest);\r\n            collectibleUpdate.push({ id: tokenId, uri: tokenURI, owner: address, ...jsonManifest });\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n      setYourCollectibles(collectibleUpdate);\r\n    };\r\n    updateYourCollectibles();\r\n  }, [address, yourBalance]);\r\n\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\r\n  */\r\n\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      yourMainnetBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\r\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\r\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    yourMainnetBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetContracts,\r\n  ]);\r\n\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n\r\n                    let switchTx;\r\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\r\n                    try {\r\n                      switchTx = await ethereum.request({\r\n                        method: \"wallet_switchEthereumChain\",\r\n                        params: [{ chainId: data[0].chainId }],\r\n                      });\r\n                    } catch (switchError) {\r\n                      // not checking specific error code, because maybe we're not using MetaMask\r\n                      try {\r\n                        switchTx = await ethereum.request({\r\n                          method: \"wallet_addEthereumChain\",\r\n                          params: data,\r\n                        });\r\n                      } catch (addError) {\r\n                        // handle \"add\" error\r\n                      }\r\n                    }\r\n\r\n                    if (switchTx) {\r\n                      console.log(switchTx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    const provider = await web3Modal.connect();\r\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", chainId => {\r\n      console.log(`chain changed to ${chainId}! updating providers`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`account changed!`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  const [route, setRoute] = useState();\r\n  useEffect(() => {\r\n    setRoute(window.location.pathname);\r\n  }, [setRoute]);\r\n\r\n  let faucetHint = \"\";\r\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\r\n\r\n  const [faucetClicked, setFaucetClicked] = useState(false);\r\n  if (\r\n    !faucetClicked &&\r\n    localProvider &&\r\n    localProvider._network &&\r\n    localProvider._network.chainId == 31337 &&\r\n    yourLocalBalance &&\r\n    ethers.utils.formatEther(yourLocalBalance) <= 0\r\n  ) {\r\n    faucetHint = (\r\n      <div style={{ padding: 16 }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: ethers.utils.parseEther(\"0.01\"),\r\n            });\r\n            setFaucetClicked(true);\r\n          }}\r\n        >\r\n          💰 Grab funds from the faucet ⛽️\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const [yourJSON, setYourJSON] = useState(STARTING_JSON);\r\n  const [sending, setSending] = useState();\r\n  const [ipfsHash, setIpfsHash] = useState();\r\n  const [ipfsDownHash, setIpfsDownHash] = useState();\r\n  const [downloading, setDownloading] = useState();\r\n  const [ipfsContent, setIpfsContent] = useState();\r\n  const [transferToAddresses, setTransferToAddresses] = useState({});\r\n  const [minting, setMinting] = useState(false);\r\n  const [count, setCount] = useState(1);\r\n\r\n  // the json for the nfts\r\n  const json = {\r\n    1: {\r\n      description: \"It's actually a bison?\",\r\n      external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\r\n      image: \"https://austingriffith.com/images/paintings/buffalo.jpg\",\r\n      name: \"Buffalo\",\r\n      attributes: [\r\n        {\r\n          trait_type: \"BackgroundColor\",\r\n          value: \"green\",\r\n        },\r\n        {\r\n          trait_type: \"Eyes\",\r\n          value: \"googly\",\r\n        },\r\n        {\r\n          trait_type: \"Stamina\",\r\n          value: 42,\r\n        },\r\n      ],\r\n    },\r\n    2: {\r\n      description: \"What is it so worried about?\",\r\n      external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\r\n      image: \"https://austingriffith.com/images/paintings/zebra.jpg\",\r\n      name: \"Zebra\",\r\n      attributes: [\r\n        {\r\n          trait_type: \"BackgroundColor\",\r\n          value: \"blue\",\r\n        },\r\n        {\r\n          trait_type: \"Eyes\",\r\n          value: \"googly\",\r\n        },\r\n        {\r\n          trait_type: \"Stamina\",\r\n          value: 38,\r\n        },\r\n      ],\r\n    },\r\n    3: {\r\n      description: \"What a horn!\",\r\n      external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\r\n      image: \"https://austingriffith.com/images/paintings/rhino.jpg\",\r\n      name: \"Rhino\",\r\n      attributes: [\r\n        {\r\n          trait_type: \"BackgroundColor\",\r\n          value: \"pink\",\r\n        },\r\n        {\r\n          trait_type: \"Eyes\",\r\n          value: \"googly\",\r\n        },\r\n        {\r\n          trait_type: \"Stamina\",\r\n          value: 22,\r\n        },\r\n      ],\r\n    },\r\n    4: {\r\n      description: \"Is that an underbyte?\",\r\n      external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\r\n      image: \"https://austingriffith.com/images/paintings/fish.jpg\",\r\n      name: \"Fish\",\r\n      attributes: [\r\n        {\r\n          trait_type: \"BackgroundColor\",\r\n          value: \"blue\",\r\n        },\r\n        {\r\n          trait_type: \"Eyes\",\r\n          value: \"googly\",\r\n        },\r\n        {\r\n          trait_type: \"Stamina\",\r\n          value: 15,\r\n        },\r\n      ],\r\n    },\r\n    5: {\r\n      description: \"So delicate.\",\r\n      external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\r\n      image: \"https://austingriffith.com/images/paintings/flamingo.jpg\",\r\n      name: \"Flamingo\",\r\n      attributes: [\r\n        {\r\n          trait_type: \"BackgroundColor\",\r\n          value: \"black\",\r\n        },\r\n        {\r\n          trait_type: \"Eyes\",\r\n          value: \"googly\",\r\n        },\r\n        {\r\n          trait_type: \"Stamina\",\r\n          value: 6,\r\n        },\r\n      ],\r\n    },\r\n    6: {\r\n      description: \"Raaaar!\",\r\n      external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\r\n      image: \"https://austingriffith.com/images/paintings/godzilla.jpg\",\r\n      name: \"Godzilla\",\r\n      attributes: [\r\n        {\r\n          trait_type: \"BackgroundColor\",\r\n          value: \"orange\",\r\n        },\r\n        {\r\n          trait_type: \"Eyes\",\r\n          value: \"googly\",\r\n        },\r\n        {\r\n          trait_type: \"Stamina\",\r\n          value: 99,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const mintItem = async () => {\r\n    // upload to ipfs\r\n    const uploaded = await ipfs.add(JSON.stringify(json[count]));\r\n    setCount(count + 1);\r\n    console.log(\"Uploaded Hash: \", uploaded);\r\n    const result = tx(\r\n      writeContracts &&\r\n        writeContracts.YourCollectible &&\r\n        writeContracts.YourCollectible.mintItem(address, uploaded.path),\r\n      update => {\r\n        console.log(\"📡 Transaction Update:\", update);\r\n        if (update && (update.status === \"confirmed\" || update.status === 1)) {\r\n          console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\r\n          console.log(\r\n            \" ⛽️ \" +\r\n              update.gasUsed +\r\n              \"/\" +\r\n              (update.gasLimit || update.gas) +\r\n              \" @ \" +\r\n              parseFloat(update.gasPrice) / 1000000000 +\r\n              \" gwei\",\r\n          );\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* ✏️ Edit the header and change the title to your project name */}\r\n      <Header />\r\n      {networkDisplay}\r\n      <BrowserRouter>\r\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\r\n          <Menu.Item key=\"/\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/\");\r\n              }}\r\n              to=\"/\"\r\n            >\r\n              YourCollectibles\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/transfers\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/transfers\");\r\n              }}\r\n              to=\"/transfers\"\r\n            >\r\n              Transfers\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/ipfsup\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/ipfsup\");\r\n              }}\r\n              to=\"/ipfsup\"\r\n            >\r\n              IPFS Upload\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/ipfsdown\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/ipfsdown\");\r\n              }}\r\n              to=\"/ipfsdown\"\r\n            >\r\n              IPFS Download\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/debugcontracts\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/debugcontracts\");\r\n              }}\r\n              to=\"/debugcontracts\"\r\n            >\r\n              Debug Contracts\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <div style={{ width: 640, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\r\n              <Button\r\n                disabled={minting}\r\n                shape=\"round\"\r\n                size=\"large\"\r\n                onClick={() => {\r\n                  mintItem();\r\n                }}\r\n              >\r\n                MINT NFT\r\n              </Button>\r\n            </div>\r\n            <div style={{ width: 640, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\r\n              <List\r\n                bordered\r\n                dataSource={yourCollectibles}\r\n                renderItem={item => {\r\n                  const id = item.id.toNumber();\r\n                  return (\r\n                    <List.Item key={id + \"_\" + item.uri + \"_\" + item.owner}>\r\n                      <Card\r\n                        title={\r\n                          <div>\r\n                            <span style={{ fontSize: 16, marginRight: 8 }}>#{id}</span> {item.name}\r\n                          </div>\r\n                        }\r\n                      >\r\n                        <div>\r\n                          <img src={item.image} style={{ maxWidth: 150 }} />\r\n                        </div>\r\n                        <div>{item.description}</div>\r\n                      </Card>\r\n\r\n                      <div>\r\n                        owner:{\" \"}\r\n                        <Address\r\n                          address={item.owner}\r\n                          ensProvider={mainnetProvider}\r\n                          blockExplorer={blockExplorer}\r\n                          fontSize={16}\r\n                        />\r\n                        <AddressInput\r\n                          ensProvider={mainnetProvider}\r\n                          placeholder=\"transfer to address\"\r\n                          value={transferToAddresses[id]}\r\n                          onChange={newValue => {\r\n                            const update = {};\r\n                            update[id] = newValue;\r\n                            setTransferToAddresses({ ...transferToAddresses, ...update });\r\n                          }}\r\n                        />\r\n                        <Button\r\n                          onClick={() => {\r\n                            console.log(\"writeContracts\", writeContracts);\r\n                            tx(writeContracts.YourCollectible.transferFrom(address, transferToAddresses[id], id));\r\n                          }}\r\n                        >\r\n                          Transfer\r\n                        </Button>\r\n                      </div>\r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </Route>\r\n\r\n          <Route path=\"/transfers\">\r\n            <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\r\n              <List\r\n                bordered\r\n                dataSource={transferEvents}\r\n                renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item[0] + \"_\" + item[1] + \"_\" + item.blockNumber + \"_\" + item.args[2].toNumber()}>\r\n                      <span style={{ fontSize: 16, marginRight: 8 }}>#{item.args[2].toNumber()}</span>\r\n                      <Address address={item.args[0]} ensProvider={mainnetProvider} fontSize={16} /> =&gt;\r\n                      <Address address={item.args[1]} ensProvider={mainnetProvider} fontSize={16} />\r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </Route>\r\n\r\n          <Route path=\"/ipfsup\">\r\n            <div style={{ paddingTop: 32, width: 740, margin: \"auto\", textAlign: \"left\" }}>\r\n              <ReactJson\r\n                style={{ padding: 8 }}\r\n                src={yourJSON}\r\n                theme=\"pop\"\r\n                enableClipboard={false}\r\n                onEdit={(edit, a) => {\r\n                  setYourJSON(edit.updated_src);\r\n                }}\r\n                onAdd={(add, a) => {\r\n                  setYourJSON(add.updated_src);\r\n                }}\r\n                onDelete={(del, a) => {\r\n                  setYourJSON(del.updated_src);\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <Button\r\n              style={{ margin: 8 }}\r\n              loading={sending}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n              type=\"primary\"\r\n              onClick={async () => {\r\n                console.log(\"UPLOADING...\", yourJSON);\r\n                setSending(true);\r\n                setIpfsHash();\r\n                const result = await ipfs.add(JSON.stringify(yourJSON)); // addToIPFS(JSON.stringify(yourJSON))\r\n                if (result && result.path) {\r\n                  setIpfsHash(result.path);\r\n                }\r\n                setSending(false);\r\n                console.log(\"RESULT:\", result);\r\n              }}\r\n            >\r\n              Upload to IPFS\r\n            </Button>\r\n\r\n            <div style={{ padding: 16, paddingBottom: 150 }}>{ipfsHash}</div>\r\n          </Route>\r\n          <Route path=\"/ipfsdown\">\r\n            <div style={{ paddingTop: 32, width: 740, margin: \"auto\" }}>\r\n              <Input\r\n                value={ipfsDownHash}\r\n                placeHolder=\"IPFS hash (like QmadqNw8zkdrrwdtPFK1pLi8PPxmkQ4pDJXY8ozHtz6tZq)\"\r\n                onChange={e => {\r\n                  setIpfsDownHash(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n            <Button\r\n              style={{ margin: 8 }}\r\n              loading={sending}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n              type=\"primary\"\r\n              onClick={async () => {\r\n                console.log(\"DOWNLOADING...\", ipfsDownHash);\r\n                setDownloading(true);\r\n                setIpfsContent();\r\n                const result = await getFromIPFS(ipfsDownHash); // addToIPFS(JSON.stringify(yourJSON))\r\n                if (result && result.toString) {\r\n                  setIpfsContent(result.toString());\r\n                }\r\n                setDownloading(false);\r\n              }}\r\n            >\r\n              Download from IPFS\r\n            </Button>\r\n\r\n            <pre style={{ padding: 16, width: 500, margin: \"auto\", paddingBottom: 150 }}>{ipfsContent}</pre>\r\n          </Route>\r\n          <Route path=\"/debugcontracts\">\r\n            <Contract\r\n              name=\"YourCollectible\"\r\n              signer={userSigner}\r\n              provider={localProvider}\r\n              address={address}\r\n              blockExplorer={blockExplorer}\r\n              contractConfig={contractConfig}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n\r\n      <ThemeSwitch />\r\n\r\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\r\n        <Account\r\n          address={address}\r\n          localProvider={localProvider}\r\n          userSigner={userSigner}\r\n          mainnetProvider={mainnetProvider}\r\n          price={price}\r\n          web3Modal={web3Modal}\r\n          loadWeb3Modal={loadWeb3Modal}\r\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n          blockExplorer={blockExplorer}\r\n        />\r\n        {faucetHint}\r\n      </div>\r\n\r\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\r\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={8}>\r\n            <Ramp price={price} address={address} networks={NETWORKS} />\r\n          </Col>\r\n\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\r\n            <GasGauge gasPrice={gasPrice} />\r\n          </Col>\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\r\n            <Button\r\n              onClick={() => {\r\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\r\n              }}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n            >\r\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\r\n                💬\r\n              </span>\r\n              Support\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={24}>\r\n            {\r\n              /*  if the local provider has a signer, let's show the faucet:  */\r\n              faucetAvailable ? (\r\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\r\n              ) : (\r\n                \"\"\r\n              )\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <App subgraphUri={subgraphUri} />\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\r\n\r\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  kovan: {\r\n    name: \"kovan\",\r\n    color: \"#7003DD\",\r\n    chainId: 42,\r\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://kovan.etherscan.io/\",\r\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\r\n  },\r\n  rinkeby: {\r\n    name: \"rinkeby\",\r\n    color: \"#e0d068\",\r\n    chainId: 4,\r\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\r\n    faucet: \"https://faucet.rinkeby.io/\",\r\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\r\n  },\r\n  ropsten: {\r\n    name: \"ropsten\",\r\n    color: \"#F60D09\",\r\n    chainId: 3,\r\n    faucet: \"https://faucet.ropsten.be/\",\r\n    blockExplorer: \"https://ropsten.etherscan.io/\",\r\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  sepolia: {\r\n    name: \"sepolia\",\r\n    color: \"#0975F6\",\r\n    chainId: 11155111,\r\n    faucet: \"https://faucet.sepolia.dev/\",\r\n    blockExplorer: \"https://sepolia.etherscan.io/\",\r\n    rpcUrl: `https://sepolia.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  xdai: {\r\n    name: \"xdai\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://dai.poa.network\",\r\n    faucet: \"https://xdai-faucet.top/\",\r\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\r\n  },\r\n  matic: {\r\n    name: \"matic\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\r\n  },\r\n  localArbitrum: {\r\n    name: \"localArbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 153869338190755,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:8547`,\r\n  },\r\n  localArbitrumL1: {\r\n    name: \"localArbitrumL1\",\r\n    color: \"#50a0ea\",\r\n    chainId: 44010,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:7545`,\r\n  },\r\n  rinkebyArbitrum: {\r\n    name: \"Arbitrum Testnet\",\r\n    color: \"#50a0ea\",\r\n    chainId: 421611,\r\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\r\n  },\r\n  arbitrum: {\r\n    name: \"Arbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 42161,\r\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\r\n    gasPrice: 0,\r\n  },\r\n  localOptimismL1: {\r\n    name: \"localOptimismL1\",\r\n    color: \"#f01a37\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\r\n  },\r\n  localOptimism: {\r\n    name: \"localOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\r\n    gasPrice: 0,\r\n  },\r\n  kovanOptimism: {\r\n    name: \"kovanOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 69,\r\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\r\n    rpcUrl: `https://kovan.optimism.io`,\r\n    gasPrice: 0,\r\n  },\r\n  optimism: {\r\n    name: \"optimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 10,\r\n    blockExplorer: \"https://optimistic.etherscan.io/\",\r\n    rpcUrl: `https://mainnet.optimism.io`,\r\n  },\r\n  localAvalanche: {\r\n    name: \"localAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43112,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  fujiAvalanche: {\r\n    name: \"fujiAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43113,\r\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\r\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  mainnetAvalanche: {\r\n    name: \"mainnetAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43114,\r\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\r\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  testnetHarmony: {\r\n    name: \"Harmony Testnet\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666700000,\r\n    blockExplorer: \"https://explorer.pops.one/\",\r\n    rpcUrl: `https://api.s0.b.hmny.io`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  mainnetHarmony: {\r\n    name: \"Harmony Mainnet\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666600000,\r\n    blockExplorer: \"https://explorer.harmony.one/\",\r\n    rpcUrl: `https://api.harmony.one`,\r\n    gasPrice: 1000000000,\r\n  },\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n"],"sourceRoot":""}