{"version":3,"sources":["components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","hooks/useContractConfig.js","index.jsx"],"names":["Text","Typography","Address","props","address","value","ens","useLookupAddress","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","indexOf","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","name","chainId","rpcUrl","window","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","sepolia","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","NETWORK","n","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","id","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","useEffect","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","key","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","toNumber","formatUnits","length","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","map","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","returned","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","values","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","injectedProvider","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","listAccounts","_faucetAddress","getFaucetAddress","icon","GasGauge","parseInt","Header","subTitle","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","contractListPromise","externalContractsPromise","loadAppContracts","config","default","deployedContracts","externalContracts","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","Subgraph","targetNetwork","scaffoldEthProvider","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","logo","Portis","fortmatic","Fortmatic","connector","_options","enable","authereum","Authereum","App","_network","setInjectedProvider","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useGasPrice","useUserProviderAndSigner","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","contractsConfig","setContractsConfig","loadFunc","useContractConfig","readContracts","writeContracts","mainnetContracts","useOnBlock","_lastBlockNumber","myMainnetDAIBalance","useContractReader","stakerContractBalance","Staker","threshold","balanceStaked","stakeEvents","useEventListener","timeLeft","complete","exampleExternalContractBalance","ExampleExternalContract","completeDisplay","backgroundColor","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","Web3Provider","code","reason","route","setRoute","pathname","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","selectedKeys","Item","exact","path","humanizeDuration","execute","withdraw","stake","dataSource","renderItem","item","blockNumber","align","gutter","prevTheme","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById"],"mappings":"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","file":"static/js/main.955ce3c5.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n*/\r\n\r\nconst { Text } = Typography;\r\n\r\nconst blockExplorerLink = (address, blockExplorer) =>\r\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\r\n\r\nexport default function Address(props) {\r\n  const address = props.value || props.address;\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let displayAddress = address.substr(0, 6);\r\n\r\n  if (ens && ens.indexOf(\"0x\") < 0) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let text;\r\n  if (props.onChange) {\r\n    text = (\r\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  } else {\r\n    text = (\r\n      <Text copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {text}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useBalance } from \"eth-hooks\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  // const [listening, setListening] = useState(false);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n\r\n  let floatBalance = parseFloat(\"0.00\");\r\n\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") {\r\n    usingBalance = props.balance;\r\n  }\r\n  if (typeof props.value !== \"undefined\") {\r\n    usingBalance = props.value;\r\n  }\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier;\r\n\r\n  if (price && dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\r\n\r\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  kovan: {\r\n    name: \"kovan\",\r\n    color: \"#7003DD\",\r\n    chainId: 42,\r\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://kovan.etherscan.io/\",\r\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\r\n  },\r\n  rinkeby: {\r\n    name: \"rinkeby\",\r\n    color: \"#e0d068\",\r\n    chainId: 4,\r\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\r\n    faucet: \"https://faucet.rinkeby.io/\",\r\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\r\n  },\r\n  ropsten: {\r\n    name: \"ropsten\",\r\n    color: \"#F60D09\",\r\n    chainId: 3,\r\n    faucet: \"https://faucet.ropsten.be/\",\r\n    blockExplorer: \"https://ropsten.etherscan.io/\",\r\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  sepolia: {\r\n    name: \"sepolia\",\r\n    color: \"#87ff65\",\r\n    chainId: 11155111,\r\n    faucet: \"https://faucet.sepolia.dev/\",\r\n    blockExplorer: \"https://sepolia.etherscan.io/\",\r\n    rpcUrl: `https://sepolia.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  xdai: {\r\n    name: \"xdai\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://dai.poa.network\",\r\n    faucet: \"https://xdai-faucet.top/\",\r\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\r\n  },\r\n  matic: {\r\n    name: \"matic\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\r\n  },\r\n  localArbitrum: {\r\n    name: \"localArbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 153869338190755,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:8547`,\r\n  },\r\n  localArbitrumL1: {\r\n    name: \"localArbitrumL1\",\r\n    color: \"#50a0ea\",\r\n    chainId: 44010,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:7545`,\r\n  },\r\n  rinkebyArbitrum: {\r\n    name: \"Arbitrum Testnet\",\r\n    color: \"#50a0ea\",\r\n    chainId: 421611,\r\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\r\n  },\r\n  arbitrum: {\r\n    name: \"Arbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 42161,\r\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\r\n    gasPrice: 0,\r\n  },\r\n  localOptimismL1: {\r\n    name: \"localOptimismL1\",\r\n    color: \"#f01a37\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\r\n  },\r\n  localOptimism: {\r\n    name: \"localOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\r\n    gasPrice: 0,\r\n  },\r\n  kovanOptimism: {\r\n    name: \"kovanOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 69,\r\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\r\n    rpcUrl: `https://kovan.optimism.io`,\r\n    gasPrice: 0,\r\n  },\r\n  optimism: {\r\n    name: \"optimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 10,\r\n    blockExplorer: \"https://optimistic.etherscan.io/\",\r\n    rpcUrl: `https://mainnet.optimism.io`,\r\n  },\r\n  localAvalanche: {\r\n    name: \"localAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43112,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  fujiAvalanche: {\r\n    name: \"fujiAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43113,\r\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\r\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  mainnetAvalanche: {\r\n    name: \"mainnetAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43114,\r\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\r\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  testnetHarmony: {\r\n    name: \"Harmony Testnet\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666700000,\r\n    blockExplorer: \"https://explorer.pops.one/\",\r\n    rpcUrl: `https://api.s0.b.hmny.io`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  mainnetHarmony: {\r\n    name: \"Harmony Mainnet\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666600000,\r\n    blockExplorer: \"https://explorer.harmony.one/\",\r\n    rpcUrl: `https://api.harmony.one`,\r\n    gasPrice: 1000000000,\r\n  },\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n\r\n      let options = null;\r\n      let notify = null;\r\n      if (navigator.onLine) {\r\n        options = {\r\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n          system: \"ethereum\",\r\n          networkId: network.chainId,\r\n          // darkMode: Boolean, // (default: false)\r\n          transactionHandler: txInformation => {\r\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n            const possibleFunction = callbacks[txInformation.transaction.hash];\r\n            if (typeof possibleFunction === \"function\") {\r\n              possibleFunction(txInformation.transaction);\r\n            }\r\n          },\r\n        };\r\n\r\n        notify = Notify(options);\r\n      }\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        if (DEBUG) console.log(e);\r\n        // Accounts for Metamask and default signer on all networks\r\n        let message =\r\n          e.data && e.data.message\r\n            ? e.data.message\r\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\r\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\r\n            : e.data\r\n            ? e.data\r\n            : JSON.stringify(e);\r\n        if (!e.error && e.message) {\r\n          message = e.message;\r\n        }\r\n\r\n        console.log(\"Attempt to clean up:\", message);\r\n        try {\r\n          let obj = JSON.parse(message);\r\n          if (obj && obj.body) {\r\n            let errorObj = JSON.parse(obj.body);\r\n            if (errorObj && errorObj.error && errorObj.error.message) {\r\n              message = errorObj.error.message;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          //ignore\r\n        }\r\n\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Badge, Input } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport Blockie from \"./Blockie\";\r\nimport { ethers } from \"ethers\";\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/*\r\n  ~ What it does? ~\r\n  Displays an address input with QR scan option\r\n  ~ How can I use? ~\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n  ~ Features ~\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n*/\r\n\r\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\r\n\r\nexport default function AddressInput(props) {\r\n  const { ensProvider, onChange } = props;\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (isENS(address)) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scan ? (\r\n        <div\r\n          style={{\r\n            zIndex: 256,\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            width: \"100%\",\r\n          }}\r\n          onClick={() => {\r\n            setScan(false);\r\n          }}\r\n        >\r\n          <QrReader\r\n            delay={250}\r\n            resolution={1200}\r\n            onError={e => {\r\n              console.log(\"SCAN ERROR\", e);\r\n              setScan(false);\r\n            }}\r\n            onScan={newValue => {\r\n              if (newValue) {\r\n                console.log(\"SCAN VALUE\", newValue);\r\n                let possibleNewValue = newValue;\r\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\r\n                }\r\n                setScan(false);\r\n                updateAddress(possibleNewValue);\r\n              }\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\r\n        addonAfter={\r\n          <div\r\n            style={{ marginTop: 4, cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setScan(!scan);\r\n            }}\r\n          >\r\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n              <QrcodeOutlined style={{ fontSize: 18 }} />\r\n            </Badge>{\" \"}\r\n            Scan\r\n          </div>\r\n        }\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    if (!props.price) return \"\";\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"USD\") {\r\n            setMode(\"ETH\");\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode(\"USD\");\r\n            if (currentValue) {\r\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === \"USD\") {\r\n    prefix = \"$\";\r\n    addonAfter = option(\"USD 🔀\");\r\n  } else {\r\n    prefix = \"Ξ\";\r\n    addonAfter = option(\"ETH 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.signer || props.provider);\r\n\r\n              let value;\r\n              try {\r\n                value = ethers.utils.parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n*/\r\n\r\nexport default function Account({\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n}) {\r\n  const modalButtons = [];\r\n  if (web3Modal) {\r\n    if (web3Modal.cachedProvider) {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"logoutbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          onClick={logoutOfWeb3Modal}\r\n        >\r\n          logout\r\n        </Button>,\r\n      );\r\n    } else {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"loginbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\r\n          onClick={loadWeb3Modal}\r\n        >\r\n          connect\r\n        </Button>,\r\n      );\r\n    }\r\n  }\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  const display = minimized ? (\r\n    \"\"\r\n  ) : (\r\n    <span>\r\n      {address ? (\r\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\r\n      ) : (\r\n        \"Connecting...\"\r\n      )}\r\n      <Balance address={address} provider={localProvider} price={price} />\r\n      <Wallet\r\n        address={address}\r\n        provider={localProvider}\r\n        signer={userSigner}\r\n        ensProvider={mainnetProvider}\r\n        price={price}\r\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n      />\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {display}\r\n      {modalButtons}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n*/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Address } from \"..\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = thing => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return <Address address={thing} fontSize={22} />;\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nexport default tryToDisplay;\r\n","import { Col, Divider, Row } from \"antd\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <a href=\"#\" onClick={refresh}>\r\n              🔄\r\n            </a>\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../../helpers\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\r\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\r\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\r\n};\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              const args = functionInfo.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                try {\r\n                  const returned = await contractFunction(...args);\r\n                  result = tryToDisplay(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"antd\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\r\nimport Account from \"../Account\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  show,\r\n  price,\r\n  blockExplorer,\r\n  chainId,\r\n  contractConfig,\r\n}) {\r\n  const contracts = useContractLoader(provider, contractConfig, chainId);\r\n  let contract;\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(() => {\r\n    const results = contract\r\n      ? Object.values(contract.interface.functions).filter(\r\n          fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\r\n        )\r\n      : [];\r\n    return results;\r\n  }, [contract, show]);\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false);\r\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\r\n    const contractFunc =\r\n      contractFuncInfo.stateMutability === \"view\" || contractFuncInfo.stateMutability === \"pure\"\r\n        ? contract[contractFuncInfo.name]\r\n        : contract.connect(signer)[contractFuncInfo.name];\r\n\r\n    if (typeof contractFunc === \"function\") {\r\n      if (isQueryable(contractFuncInfo)) {\r\n        // If there are no inputs, just display return value\r\n        return (\r\n          <DisplayVariable\r\n            key={contractFuncInfo.name}\r\n            contractFunction={contractFunc}\r\n            functionInfo={contractFuncInfo}\r\n            refreshRequired={refreshRequired}\r\n            triggerRefresh={triggerRefresh}\r\n          />\r\n        );\r\n      }\r\n\r\n      // If there are inputs, display a form to allow users to provide these\r\n      return (\r\n        <FunctionForm\r\n          key={\"FF\" + contractFuncInfo.name}\r\n          contractFunction={contractFunc}\r\n          functionInfo={contractFuncInfo}\r\n          provider={provider}\r\n          gasPrice={gasPrice}\r\n          triggerRefresh={triggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Account\r\n                address={address}\r\n                localProvider={provider}\r\n                injectedProvider={provider}\r\n                mainnetProvider={provider}\r\n                price={price}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n              {account}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Input, Tooltip } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n**/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  const { price, placeholder, localProvider, ensProvider } = props;\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (localProvider) {\r\n        const _faucetAddress = await localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const updateAddress = newValue => {\r\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\r\n      setAddress(newValue);\r\n    }\r\n  };\r\n\r\n  const tx = Transactor(localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={placeholder ? placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        value={address}\r\n        onChange={e => updateAddress(e.target.value)}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"1.5\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={localProvider}\r\n              ensProvider={ensProvider}\r\n              price={price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// added display of 0 instead of NaN if gas price is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays gas gauge\r\n\r\n  ~ How can I use? ~\r\n\r\n  <GasGauge\r\n    gasPrice={gasPrice}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide gasPrice={gasPrice} and get current gas gauge\r\n*/\r\n\r\nexport default function GasGauge(props) {\r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        window.open(\"https://ethgasstation.info/\");\r\n      }}\r\n      size=\"large\"\r\n      shape=\"round\"\r\n    >\r\n      <span style={{ marginRight: 8 }}>\r\n        <span role=\"img\" aria-label=\"fuelpump\">\r\n          ⛽️\r\n        </span>\r\n      </span>\r\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\r\n    </Button>\r\n  );\r\n}\r\n","import { PageHeader } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// displays a page header\r\n\r\nexport default function Header() {\r\n  return (\r\n    <a href=\"/\" /*target=\"_blank\" rel=\"noopener noreferrer\"*/>\r\n      <PageHeader\r\n        title=\"🏗 scaffold-eth\"\r\n        subTitle=\"forkable Ethereum dev stack focused on fast product iteration\"\r\n        style={{ cursor: \"pointer\" }}\r\n      />\r\n    </a>\r\n  );\r\n}\r\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\r\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\r\nimport { Button, Divider, Modal } from \"antd\";\r\nimport React, { useState } from \"react\";\r\n\r\n// added display of 0 if price={price} is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\r\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Ramp\r\n    price={price}\r\n    address={address}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Ramp opens directly in the application, component uses RampInstantSDK\r\n  - Provide price={price} and current ETH price will be displayed\r\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\r\n*/\r\n\r\nexport default function Ramp(props) {\r\n  const [modalUp, setModalUp] = useState(\"down\");\r\n\r\n  const type = \"default\";\r\n\r\n  const allFaucets = [];\r\n  for (const n in props.networks) {\r\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\r\n      allFaucets.push(\r\n        <p key={props.networks[n].chainId}>\r\n          <Button\r\n            style={{ color: props.networks[n].color }}\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(props.networks[n].faucet);\r\n            }}\r\n          >\r\n            {props.networks[n].name}\r\n          </Button>\r\n        </p>,\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"large\"\r\n        shape=\"round\"\r\n        onClick={() => {\r\n          setModalUp(\"up\");\r\n        }}\r\n      >\r\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\r\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\r\n      </Button>\r\n      <Modal\r\n        title=\"Buy ETH\"\r\n        visible={modalUp === \"up\"}\r\n        onCancel={() => {\r\n          setModalUp(\"down\");\r\n        }}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            onClick={() => {\r\n              setModalUp(\"down\");\r\n            }}\r\n          >\r\n            cancel\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-us\">\r\n                🇺🇸\r\n              </span>\r\n            </span>\r\n            Wyre\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              new RampInstantSDK({\r\n                hostAppName: \"scaffold-eth\",\r\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\r\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\r\n                swapAsset: \"ETH\",\r\n                userAddress: props.address,\r\n              })\r\n                .on(\"*\", event => console.log(event))\r\n                .show();\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-gb\">\r\n                🇬🇧\r\n              </span>\r\n            </span>\r\n            Ramp\r\n          </Button>\r\n        </p>\r\n\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\r\n              🏦\r\n            </span>\r\n            Coinbase\r\n          </Button>\r\n        </p>\r\n\r\n        <Divider />\r\n\r\n        <h2>Testnet ETH</h2>\r\n\r\n        {allFaucets}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  return undefined;\r\n  console.log(\"no call of that name!\");\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n\r\n  const [tokens, setTokens] = useState();\r\n\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenListResponse = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenListResponse.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  // Avoid theme change flicker\r\n  // if (status === \"loading\") {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\nimport { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { utils, ethers } from \"ethers\";\r\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\r\nimport { NETWORKS } from \"../constants\";\r\nimport { Transactor } from \"../helpers\";\r\n\r\n/*\r\nThis is a component for bridging between L1 & L2\r\nCurrently it supports Testnet deposits for Arbitrum & Optimism\r\n\r\n __          _______ _____\r\n \\ \\        / /_   _|  __ \\\r\n  \\ \\  /\\  / /  | | | |__) |\r\n   \\ \\/  \\/ /   | | |  ___/\r\n    \\  /\\  /   _| |_| |\r\n     \\/  \\/   |_____|_|\r\n\r\n\r\n*/\r\n\r\nexport default function L2ArbitrumBridge({ address, userSigner }) {\r\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\r\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\r\n  const [L1Provider, setL1Provider] = useState(\"\");\r\n  const [L2Provider, setL2Provider] = useState(\"\");\r\n  const [rollup, setRollup] = useState(\"arbitrum\");\r\n  const [environment, setEnvironment] = useState(\"test\");\r\n\r\n  const rollupConfig = {\r\n    arbitrum: {\r\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\r\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\r\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\r\n    },\r\n    optimism: {\r\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\r\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\r\n    },\r\n  };\r\n\r\n  const activeConfig = rollupConfig[rollup][environment];\r\n\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  const tx = Transactor(userSigner);\r\n\r\n  useEffect(() => {\r\n    async function setProviders() {\r\n      const L1 = activeConfig.L1;\r\n      const L2 = activeConfig.L2;\r\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\r\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\r\n      setL1EthBalance(\"...\");\r\n      setL2EthBalance(\"...\");\r\n    }\r\n    setProviders();\r\n  }, [rollup]);\r\n\r\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\r\n\r\n  useOnBlock(L1Provider, async () => {\r\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\r\n    const yourL1Balance = await L1Provider.getBalance(address);\r\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\r\n    const yourL2Balance = await L2Provider.getBalance(address);\r\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\r\n  });\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 12,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"token\",\r\n      key: \"token\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} L1 Balance`,\r\n      dataIndex: \"l1\",\r\n      key: \"l1\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\r\n      dataIndex: \"l2\",\r\n      key: \"l2\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      token: \"ETH\",\r\n      l1: \"Ξ\" + L1EthBalance,\r\n      l2: \"Ξ\" + L2EthBalance,\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onAssetChange = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  async function onFinish(values) {\r\n    console.log(contracts);\r\n    console.log(values.amount.toString());\r\n    console.log(rollup);\r\n    let newTx;\r\n    try {\r\n      if (rollup === \"arbitrum\") {\r\n        newTx = await tx(\r\n          contracts.Inbox.depositEth(1_300_000, {\r\n            value: utils.parseEther(values.amount.toString()),\r\n            gasLimit: 300000,\r\n          }),\r\n        );\r\n      } else if (rollup === \"optimism\") {\r\n        newTx = await tx(\r\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\r\n            value: utils.parseEther(values.amount.toString()),\r\n          }),\r\n        );\r\n      }\r\n      await newTx.wait();\r\n      console.log(\"woop!\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\r\n\r\n  return (\r\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\r\n        <Radio.Group\r\n          value={rollup}\r\n          onChange={e => {\r\n            setRollup(e.target.value);\r\n          }}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\r\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\r\n        </Radio.Group>\r\n\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\r\n\r\n        <Form\r\n          {...formItemLayout}\r\n          form={form}\r\n          name=\"control-hooks\"\r\n          onFinish={onFinish}\r\n          initialValues={{ assetType: \"eth\" }}\r\n        >\r\n          <Form.Item\r\n            name=\"assetType\"\r\n            label=\"Select Asset Type\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\r\n              <Option value=\"eth\">ETH</Option>\r\n              <Option disabled value=\"erc20\">\r\n                ERC-20\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"address\" label=\"Address\">\r\n            <Input disabled placeholder={address} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount to bridge\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\r\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\r\nconst ArbitrumInboxABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"InboxMessageDelivered\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\r\n    name: \"InboxMessageDeliveredFromOrigin\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"WhitelistSourceUpdated\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"bridge\",\r\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\r\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"createRetryableTicket\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\r\n    name: \"depositEth\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"isMaster\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2Message\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2MessageFromOrigin\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"updateWhitelistSource\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"whitelist\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\r\nconst OVM_L1StandardBridgeABI = [\r\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\r\n];\r\n\r\nconst L1BridgeMetadata = {\r\n  // Arbitrium Contract's\r\n  44010: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  4: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  // Optimism Contract's\r\n  31337: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n  42: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { utils } from \"ethers\";\r\nimport { Select } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { Address, AddressInput } from \"../components\";\r\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\r\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\r\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\r\n  const listOfTokens = useTokenList(\r\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>👷</span>\r\n        Edit your <b>contract</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/contracts\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🛰</span>\r\n        <b>compile/deploy</b> with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚀</span>\r\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/react-app/src/contracts/\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🎛</span>\r\n        Edit your <b>frontend</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/reactapp/src/App.js\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔭</span>\r\n        explore the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{\r\n            marginLeft: 4,\r\n            marginRight: 4,\r\n            /* backgroundColor: \"#f9f9f9\", */\r\n            padding: 4,\r\n            borderRadius: 4,\r\n            fontWeight: \"bolder\",\r\n          }}\r\n        >\r\n          🖇 hooks\r\n        </span>\r\n        and\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          📦 components\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        for example, the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          useBalance()\r\n        </span>{\" \"}\r\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\r\n      </div>\r\n\r\n      <div style={{ margin: 8 }}>\r\n        <div>\r\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\r\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            tokenlists.org!\r\n          </a>\r\n        </div>\r\n        <Select\r\n          showSearch\r\n          value={selectedToken}\r\n          onChange={value => {\r\n            console.log(`selected ${value}`);\r\n            setSelectedToken(value);\r\n          }}\r\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n          optionFilterProp=\"children\"\r\n        >\r\n          {listOfTokens.map(token => (\r\n            <Option key={token.symbol} value={token.symbol}>\r\n              {token.symbol}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        as you build your app you&apos;ll need web3 specific components like an\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          {\"<AddressInput/>\"}\r\n        </span>\r\n        component:\r\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\r\n          <AddressInput ensProvider={mainnetProvider} />\r\n        </div>\r\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        this balance could be multiplied by\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          price\r\n        </span>{\" \"}\r\n        that is loaded with the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          usePrice\r\n        </span>{\" \"}\r\n        hook with the current value: <b>${price}</b>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💧</span>\r\n        use the <b>faucet</b> to send funds to\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <Address address={address} minimized /> {address}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        deploy to a testnet or mainnet by editing\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/hardhat.config.js\r\n        </span>\r\n        and running\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔑</span>\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run generate\r\n        </span>\r\n        will create a deployer account in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat\r\n        </span>\r\n        <div style={{ marginTop: 8 }}>\r\n          (use{\" \"}\r\n          <span\r\n            className=\"highlight\"\r\n            style={{\r\n              marginLeft: 4,\r\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\r\n              borderRadius: 4,\r\n              fontWeight: \"bolder\",\r\n            }}\r\n          >\r\n            yarn run account\r\n          </span>{\" \"}\r\n          to display deployer address and balance)\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>⚙️</span>\r\n        build your app with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run build\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        ship it!\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run surge\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run s3\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run ipfs\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💬</span>\r\n        for support, join this\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\r\n            Telegram Chat\r\n          </a>\r\n        </span>\r\n      </div>\r\n      <div style={{ padding: 128 }}>\r\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport { Button, Input, Table, Typography } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport GraphiQL from \"graphiql\";\r\nimport \"graphiql/graphiql.min.css\";\r\nimport fetch from \"isomorphic-fetch\";\r\nimport React, { useState } from \"react\";\r\nimport { Address } from \"../components\";\r\n\r\nconst highlight = {\r\n  marginLeft: 4,\r\n  marginRight: 8,\r\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\r\n  borderRadius: 4,\r\n  fontWeight: \"bolder\",\r\n};\r\n\r\nfunction Subgraph(props) {\r\n  function graphQLFetcher(graphQLParams) {\r\n    return fetch(props.subgraphUri, {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(graphQLParams),\r\n    }).then(response => response.json());\r\n  }\r\n\r\n  const EXAMPLE_GRAPHQL = `\r\n  {\r\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\r\n      id\r\n      purpose\r\n      createdAt\r\n      sender {\r\n        id\r\n      }\r\n    }\r\n    senders {\r\n      id\r\n      address\r\n      purposeCount\r\n    }\r\n  }\r\n  `;\r\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\r\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\r\n\r\n  const purposeColumns = [\r\n    {\r\n      title: \"Purpose\",\r\n      dataIndex: \"purpose\",\r\n      key: \"purpose\",\r\n    },\r\n    {\r\n      title: \"Sender\",\r\n      key: \"id\",\r\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\r\n    },\r\n    {\r\n      title: \"createdAt\",\r\n      key: \"createdAt\",\r\n      dataIndex: \"createdAt\",\r\n      render: d => new Date(d * 1000).toISOString(),\r\n    },\r\n  ];\r\n\r\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\r\n\r\n  const deployWarning = (\r\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        You will find that parsing/tracking events with the{\" \"}\r\n        <span className=\"highlight\" style={highlight}>\r\n          useEventListener\r\n        </span>{\" \"}\r\n        hook becomes a chore for every new project.\r\n      </div>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        Instead, you can use{\" \"}\r\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          The Graph\r\n        </a>{\" \"}\r\n        with 🏗 scaffold-eth (\r\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          learn more\r\n        </a>\r\n        ):\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚮</span>\r\n        Clean up previous data:\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn clean-graph-node\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        Spin up a local graph node by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn run-graph-node\r\n        </span>\r\n        <span style={{ marginLeft: 4 }}>\r\n          {\" \"}\r\n          (requires{\" \"}\r\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {\" \"}\r\n            Docker\r\n          </a>\r\n          ){\" \"}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📝</span>\r\n        Create your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-create-local\r\n        </span>\r\n        (only required once!)\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        Deploy your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-ship-local\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🖍️</span>\r\n        Edit your <b>local subgraph</b> in\r\n        <span className=\"highlight\" style={highlight}>\r\n          packages/subgraph/src\r\n        </span>\r\n        (learn more about subgraph definition{\" \"}\r\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          here\r\n        </a>\r\n        )\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🤩</span>\r\n        Deploy your <b>contracts and your subgraph</b> in one go by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn deploy-and-graph\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\r\n        <div style={{ margin: 32, textAlign: \"right\" }}>\r\n          <Input\r\n            onChange={e => {\r\n              setNewPurpose(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={() => {\r\n              console.log(\"newPurpose\", newPurpose);\r\n              /* look how you call setPurpose on your contract: */\r\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\r\n            }}\r\n          >\r\n            Set Purpose\r\n          </Button>\r\n        </div>\r\n\r\n        {data ? (\r\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\r\n        ) : (\r\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\r\n        )}\r\n\r\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\r\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ padding: 64 }}>...</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Subgraph;\r\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n//import Torus from \"@toruslabs/torus-embed\"\r\nimport WalletLink from \"walletlink\";\r\nimport { Alert, Button, Col, Menu, Row, List } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\r\nimport Web3Modal from \"web3modal\";\r\nimport \"./App.css\";\r\nimport { Account, Address, Balance, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\r\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\r\nimport { Transactor } from \"./helpers\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  useGasPrice,\r\n  useOnBlock,\r\n  useUserProviderAndSigner,\r\n} from \"eth-hooks\";\r\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\r\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\r\n// import Hints from \"./Hints\";\r\nimport { ExampleUI, Hints, Subgraph } from \"./views\";\r\n\r\nimport { useContractConfig } from \"./hooks\";\r\nimport Portis from \"@portis/web3\";\r\nimport Fortmatic from \"fortmatic\";\r\nimport Authereum from \"authereum\";\r\nimport humanizeDuration from \"humanize-duration\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n/*\r\n    Welcome to 🏗 scaffold-eth !\r\n\r\n    Code:\r\n    https://github.com/austintgriffith/scaffold-eth\r\n\r\n    Support:\r\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\r\n    or DM @austingriffith on twitter or telegram\r\n\r\n    You should get your own Infura.io ID and put it in `constants.js`\r\n    (this is your connection to the main Ethereum network for ENS etc.)\r\n\r\n\r\n    🌏 EXTERNAL CONTRACTS:\r\n    You can also bring in contract artifacts in `constants.js`\r\n    (and then use the `useExternalContractLoader()` hook!)\r\n*/\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst targetNetwork = NETWORKS.sepolia; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = true;\r\nconst NETWORKCHECK = true;\r\n\r\n// 🛰 providers\r\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\r\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\r\n//\r\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\r\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\r\nconst scaffoldEthProvider = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\r\n  : null;\r\nconst poktMainnetProvider = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\r\n      \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\r\n    )\r\n  : null;\r\nconst mainnetInfura = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\r\n  : null;\r\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_ID\r\n\r\n// 🏠 Your local provider is usually pointed at your local blockchain\r\nconst localProviderUrl = targetNetwork.rpcUrl;\r\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\r\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\r\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\r\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\r\n\r\n// 🔭 block explorer URL\r\nconst blockExplorer = targetNetwork.blockExplorer;\r\n\r\n// Coinbase walletLink init\r\nconst walletLink = new WalletLink({\r\n  appName: \"coinbase\",\r\n});\r\n\r\n// WalletLink provider\r\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://mainnet.infura.io/v3/${INFURA_ID}`, 1);\r\n\r\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\r\n/*\r\n  Web3 modal helps us \"connect\" external wallets:\r\n*/\r\nconst web3Modal = new Web3Modal({\r\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\r\n  cacheProvider: true, // optional\r\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\r\n  providerOptions: {\r\n    walletconnect: {\r\n      package: WalletConnectProvider, // required\r\n      options: {\r\n        bridge: \"https://polygon.bridge.walletconnect.org\",\r\n        infuraId: INFURA_ID,\r\n        rpc: {\r\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\r\n          42: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n          100: \"https://dai.poa.network\", // xDai\r\n        },\r\n      },\r\n    },\r\n    portis: {\r\n      display: {\r\n        logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\r\n        name: \"Portis\",\r\n        description: \"Connect to Portis App\",\r\n      },\r\n      package: Portis,\r\n      options: {\r\n        id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\r\n      },\r\n    },\r\n    fortmatic: {\r\n      package: Fortmatic, // required\r\n      options: {\r\n        key: \"pk_live_5A7C91B2FC585A17\", // required\r\n      },\r\n    },\r\n    // torus: {\r\n    //   package: Torus,\r\n    //   options: {\r\n    //     networkParams: {\r\n    //       host: \"https://localhost:8545\", // optional\r\n    //       chainId: 1337, // optional\r\n    //       networkId: 1337 // optional\r\n    //     },\r\n    //     config: {\r\n    //       buildEnv: \"development\" // optional\r\n    //     },\r\n    //   },\r\n    // },\r\n    \"custom-walletlink\": {\r\n      display: {\r\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\r\n        name: \"Coinbase\",\r\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\r\n      },\r\n      package: walletLinkProvider,\r\n      connector: async (provider, _options) => {\r\n        await provider.enable();\r\n        return provider;\r\n      },\r\n    },\r\n    authereum: {\r\n      package: Authereum, // required\r\n    },\r\n  },\r\n});\r\n\r\nfunction App(props) {\r\n  const mainnetProvider =\r\n    poktMainnetProvider && poktMainnetProvider._isProvider\r\n      ? poktMainnetProvider\r\n      : scaffoldEthProvider && scaffoldEthProvider._network\r\n      ? scaffoldEthProvider\r\n      : mainnetInfura;\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [address, setAddress] = useState();\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\r\n      await injectedProvider.provider.disconnect();\r\n    }\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  };\r\n\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider);\r\n  const userSigner = userProviderAndSigner.signer;\r\n\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (userSigner) {\r\n        const newAddress = await userSigner.getAddress();\r\n        setAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [userSigner]);\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userSigner, gasPrice);\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\r\n\r\n  const contractConfig = useContractConfig();\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider, contractConfig);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\r\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\r\n\r\n  // If you want to call a function on a new block\r\n  useOnBlock(mainnetProvider, () => {\r\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\r\n  });\r\n\r\n  // Then read your DAI balance like:\r\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\r\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\r\n  ]);\r\n\r\n  //keep track of contract balance to know how much has been staked total:\r\n  const stakerContractBalance = useBalance(\r\n    localProvider,\r\n    readContracts && readContracts.Staker ? readContracts.Staker.address : null,\r\n  );\r\n  if (DEBUG) console.log(\"💵 stakerContractBalance\", stakerContractBalance);\r\n\r\n  // ** keep track of total 'threshold' needed of ETH\r\n  const threshold = useContractReader(readContracts, \"Staker\", \"threshold\");\r\n  console.log(\"💵 threshold:\", threshold);\r\n\r\n  // ** keep track of a variable from the contract in the local React state:\r\n  const balanceStaked = useContractReader(readContracts, \"Staker\", \"balances\", [address]);\r\n  console.log(\"💸 balanceStaked:\", balanceStaked);\r\n\r\n  // ** 📟 Listen for broadcast events\r\n  const stakeEvents = useEventListener(readContracts, \"Staker\", \"Stake\", localProvider, 1);\r\n  console.log(\"📟 stake events:\", stakeEvents);\r\n\r\n  // ** keep track of a variable from the contract in the local React state:\r\n  const timeLeft = useContractReader(readContracts, \"Staker\", \"timeLeft\");\r\n  console.log(\"⏳ timeLeft:\", timeLeft);\r\n\r\n  // ** Listen for when the contract has been 'completed'\r\n  const complete = useContractReader(readContracts, \"ExampleExternalContract\", \"completed\");\r\n  console.log(\"✅ complete:\", complete);\r\n\r\n  const exampleExternalContractBalance = useBalance(\r\n    localProvider,\r\n    readContracts && readContracts.ExampleExternalContract ? readContracts.ExampleExternalContract.address : null,\r\n  );\r\n  if (DEBUG) console.log(\"💵 exampleExternalContractBalance\", exampleExternalContractBalance);\r\n\r\n  let completeDisplay = \"\";\r\n  if (complete) {\r\n    completeDisplay = (\r\n      <div style={{ padding: 64, backgroundColor: \"#eeffef\", fontWeight: \"bolder\", color: \"rgba(0, 0, 0, 0.85)\" }}>\r\n        🚀 🎖 👩‍🚀 -- Staking App triggered `ExampleExternalContract` -- 🎉 🍾 🎊\r\n        <Balance balance={exampleExternalContractBalance} fontSize={64} /> ETH staked!\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\", addressFromENS)\r\n  */\r\n\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      yourMainnetBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\r\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\r\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    yourMainnetBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetContracts,\r\n  ]);\r\n\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n\r\n                    let switchTx;\r\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\r\n                    try {\r\n                      switchTx = await ethereum.request({\r\n                        method: \"wallet_switchEthereumChain\",\r\n                        params: [{ chainId: data[0].chainId }],\r\n                      });\r\n                    } catch (switchError) {\r\n                      // not checking specific error code, because maybe we're not using MetaMask\r\n                      try {\r\n                        switchTx = await ethereum.request({\r\n                          method: \"wallet_addEthereumChain\",\r\n                          params: data,\r\n                        });\r\n                      } catch (addError) {\r\n                        // handle \"add\" error\r\n                      }\r\n                    }\r\n\r\n                    if (switchTx) {\r\n                      console.log(switchTx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    const provider = await web3Modal.connect();\r\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", chainId => {\r\n      console.log(`chain changed to ${chainId}! updating providers`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`account changed!`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  const [route, setRoute] = useState();\r\n  useEffect(() => {\r\n    setRoute(window.location.pathname);\r\n  }, [setRoute]);\r\n\r\n  let faucetHint = \"\";\r\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\r\n\r\n  const [faucetClicked, setFaucetClicked] = useState(false);\r\n  if (\r\n    !faucetClicked &&\r\n    localProvider &&\r\n    localProvider._network &&\r\n    localProvider._network.chainId === 31337 &&\r\n    yourLocalBalance &&\r\n    ethers.utils.formatEther(yourLocalBalance) <= 0\r\n  ) {\r\n    faucetHint = (\r\n      <div style={{ padding: 16 }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: ethers.utils.parseEther(\"0.01\"),\r\n            });\r\n            setFaucetClicked(true);\r\n          }}\r\n        >\r\n          💰 Grab funds from the faucet ⛽️\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* ✏️ Edit the header and change the title to your project name */}\r\n      <Header />\r\n      {networkDisplay}\r\n      <BrowserRouter>\r\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\r\n          <Menu.Item key=\"/\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/\");\r\n              }}\r\n              to=\"/\"\r\n            >\r\n              Staker UI\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/contracts\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/contracts\");\r\n              }}\r\n              to=\"/contracts\"\r\n            >\r\n              Debug Contracts\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            {completeDisplay}\r\n\r\n            <div style={{ padding: 8, marginTop: 32 }}>\r\n              <div>Staker Contract:</div>\r\n              <Address value={readContracts && readContracts.Staker && readContracts.Staker.address} />\r\n            </div>\r\n\r\n            <div style={{ padding: 8, marginTop: 32 }}>\r\n              <div>Timeleft:</div>\r\n              {timeLeft && humanizeDuration(timeLeft.toNumber() * 1000)}\r\n            </div>\r\n\r\n            <div style={{ padding: 8 }}>\r\n              <div>Total staked:</div>\r\n              <Balance balance={stakerContractBalance} fontSize={64} />/<Balance balance={threshold} fontSize={64} />\r\n            </div>\r\n\r\n            <div style={{ padding: 8 }}>\r\n              <div>You staked:</div>\r\n              <Balance balance={balanceStaked} fontSize={64} />\r\n            </div>\r\n\r\n            <div style={{ padding: 8 }}>\r\n              <Button\r\n                type={\"default\"}\r\n                onClick={() => {\r\n                  tx(writeContracts.Staker.execute());\r\n                }}\r\n              >\r\n                📡 Execute!\r\n              </Button>\r\n            </div>\r\n\r\n            <div style={{ padding: 8 }}>\r\n              <Button\r\n                type={\"default\"}\r\n                onClick={() => {\r\n                  tx(writeContracts.Staker.withdraw());\r\n                }}\r\n              >\r\n                🏧 Withdraw\r\n              </Button>\r\n            </div>\r\n\r\n            <div style={{ padding: 8 }}>\r\n              <Button\r\n                type={balanceStaked ? \"success\" : \"primary\"}\r\n                onClick={() => {\r\n                  tx(writeContracts.Staker.stake({ value: ethers.utils.parseEther(\"0.5\") }));\r\n                }}\r\n              >\r\n                🥩 Stake 0.5 ether!\r\n              </Button>\r\n            </div>\r\n\r\n            {/*\r\n                🎛 this scaffolding is full of commonly used components\r\n                this <Contract/> component will automatically parse your ABI\r\n                and give you a form to interact with it locally\r\n            */}\r\n\r\n            <div style={{ width: 500, margin: \"auto\", marginTop: 64 }}>\r\n              <div>Stake Events:</div>\r\n              <List\r\n                dataSource={stakeEvents}\r\n                renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item.blockNumber}>\r\n                      <Address value={item.args[0]} ensProvider={mainnetProvider} fontSize={16} /> =>\r\n                      <Balance balance={item.args[1]} />\r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            {/* uncomment for a second contract:\r\n            <Contract\r\n              name=\"SecondContract\"\r\n              signer={userProvider.getSigner()}\r\n              provider={localProvider}\r\n              address={address}\r\n              blockExplorer={blockExplorer}\r\n              contractConfig={contractConfig}\r\n            />\r\n            */}\r\n          </Route>\r\n          <Route path=\"/contracts\">\r\n            <Contract\r\n              name=\"Staker\"\r\n              signer={userSigner}\r\n              provider={localProvider}\r\n              address={address}\r\n              blockExplorer={blockExplorer}\r\n              contractConfig={contractConfig}\r\n            />\r\n            <Contract\r\n              name=\"ExampleExternalContract\"\r\n              signer={userSigner}\r\n              provider={localProvider}\r\n              address={address}\r\n              blockExplorer={blockExplorer}\r\n              contractConfig={contractConfig}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n\r\n      <ThemeSwitch />\r\n\r\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\r\n        <Account\r\n          address={address}\r\n          localProvider={localProvider}\r\n          userSigner={userSigner}\r\n          mainnetProvider={mainnetProvider}\r\n          price={price}\r\n          web3Modal={web3Modal}\r\n          loadWeb3Modal={loadWeb3Modal}\r\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n          blockExplorer={blockExplorer}\r\n        />\r\n        {faucetHint}\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32, opacity: 0.5 }}>\r\n        {/* Add your address here */}\r\n        Created by <Address value={\"Your...address\"} ensProvider={mainnetProvider} fontSize={16} />\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32, opacity: 0.5 }}>\r\n        <a target=\"_blank\" style={{ padding: 32, color: \"#000\" }} href=\"https://github.com/scaffold-eth/scaffold-eth\">\r\n          🍴 Fork me!\r\n        </a>\r\n      </div>\r\n\r\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\r\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={8}>\r\n            <Ramp price={price} address={address} networks={NETWORKS} />\r\n          </Col>\r\n\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\r\n            <GasGauge gasPrice={gasPrice} />\r\n          </Col>\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\r\n            <Button\r\n              onClick={() => {\r\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\r\n              }}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n            >\r\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\r\n                💬\r\n              </span>\r\n              Support\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={24}>\r\n            {\r\n              /*  if the local provider has a signer, let's show the faucet:  */\r\n              faucetAvailable ? (\r\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\r\n              ) : (\r\n                \"\"\r\n              )\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect } from \"react\";\r\nimport { loadAppContracts } from \"../helpers/loadAppContracts\";\r\n\r\nexport const useContractConfig = () => {\r\n  const [contractsConfig, setContractsConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n    const loadFunc = async () => {\r\n      const result = await loadAppContracts();\r\n      setContractsConfig(result);\r\n    };\r\n    void loadFunc();\r\n  }, []);\r\n  return contractsConfig;\r\n};\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <App subgraphUri={subgraphUri} />\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}